#!/bin/sh
# Clear Screen
clear
 
# Banner 
echo " ======================================================================= " 
echo "                                                                         "     
echo "                               NXKK0000KKXN                              "     
echo "                           NKOdolc::::::cloxOKN                          "     
echo "                         XOoc::::::::::::::::cdOX                        "     
echo "       NKOkxxkkOKN     NOl::::::cloddddol:::::::lON     NKOkxxkk0KN      "     
echo "    NKxoc:::::::cokKN Xd:::::cdOKX      XKkoc:::::xX NKxl::::::::cokK    "     
echo "   Xxc:::::::::::::ckKd:::::o0             N0o:::::d0xc:::::::::::::lkN  "     
echo "  Xd:::::ldkkkdc:::::c:::::dX                Xd:::::c:::::ldkkkdc:::::xN "     
echo "  k:::::oK    NKo:::::::::l0                  0c:::::::::dK     0l::::c0 "     
echo " Nx::::cO       k:::::::::oX                  Ko::::::::cO       x:::::k "     
echo "  k:::::dKN   N0o:::::::::l0                  0c:::::::::dK    N0l::::c0 "     
echo "  Xd:::::ldkkxdc::::cc:::::dX                Xo:::::c:::::ldkkkdc:::::xN "     
echo "   Xxc:::::::::::::ckKd:::::o0N            N0o:::::x0xc:::::::::::::lkN  "     
echo "    NKxlc:::::::cokK  Xd:::::cdkKNN    NXKkoc::::cxX  Kxoc:::::::cokX    "     
echo "       NKOkkxkk0KN     NOl::::::cloddddolc::::::lON     NKOkkkkkOKN      "     
echo "                         Xkoc::::::::::::::::coOX                        "     
echo "                           NKkxolc::::::cloxOKN                          "     
echo "                               NXK000000KNN                              "     
echo "                                                                         "  
echo " ======================================================================= " 
# Hello
echo " Attempting to install Latest Nextcloud(25) on RH 8 with Nginx remiPHP7.4"
echo " ======================================================================= "


###############
## Variables ##
###############

# You MUST set the SERVERNAME here:
SERVERNAME=ncloud.Your.Domain

# These values are used to generate a ssl certificate. You can/should replace with LetsEncrypt after the build
COUNTRY=US
STATE=California
CITY=Malibu
ORG=FunInTheSun
ORG_UNIT=Nextcloud

# This is the name of the database that will get created for nextcloud
DBNAME=nextcloud

# This is the username that is needed for the nextcloud database. NOTE: This is not a nextcloud user account
USER=nextclouduser

# This is the name of the nextcloud Admin user
ADMIN=admin

# Email for Certbot
CERTMAIL=your@email.com

# Color Scheme Fun
red=`tput setaf 1`
green=`tput setaf 2`
reset=`tput sgr0`

# This generates a random password for the root account of mariadb. You can change it if you wish
date +%s | sha256sum | base64 | head -c 16 > /tmp/.MARIADBPASSWORD
sleep 1 # We need to sleep 1 to change the password, otherwise we end up with the same hash

# This generates a random password for the nextcloud user account in mariadb. You can change it if you wish
date +%s | sha256sum | base64 | head -c 16 >> /tmp/.APPPASSWORD
sleep 1 # We need to sleep 1 to change the password, otherwise we end up with the same hash

# This generates a random password for the admin user account password:
date +%s | sha256sum | base64 | head -c 16 >> /tmp/.ADMINPASS
sleep 1 # We need to sleep 1 to change the password, otherwise we end up with the same hash

##########################################################################
############## NO CHANGES FROM HERE DOWN SHOULD BE REQUIRED ##############
##########################################################################
# Updates and Upgrade
echo -e "${green}Running Updates (Might Take A while)${reset}"
sudo dnf update -y
clear

echo -e "${green}Running Upgrades (Might Take A while)${reset}"
sudo dnf upgrade -y
clear

# Enable PHP 7.4
echo -e "${green}Enable PHP 7.4${reset}"
sudo dnf -y module reset php
sudo dnf -y module enable php:7.4
clear

# Extra Packages for Enterprise Linux (EPEL)
echo -e "${green}Extra Packages${reset}"
sudo subscription-manager repos --enable codeready-builder-for-rhel-8-$(arch)-rpms
sudo dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
sudo dnf -y install https://rpms.remirepo.net/enterprise/remi-release-8.rpm
sudo dnf update -y
clear

# Install prerequisites
echo -e "${green}Install prerequisites${reset}"
sudo dnf -y install bzip2 nginx mariadb-server mariadb wget unzip  make ImageMagick ImageMagick-devel python3-certbot-nginx redis yum-utils libsodium libsodium-devel
sudo dnf update -y
sudo dnf -y install php php-mysqlnd php-fpm php-opcache php-gd php-xml php-mbstring php-common php-gd php-json php-curl php-zip php-xml php-mbstring php-bz2 php-intl php-process apcu-panel php-pecl-apcu php php-devel php-pear php-bcmath php-gmp php74-php-pecl-redis5
sudo dnf update -y
sudo printf "\n" | pecl install imagick
sudo printf "\n" | pecl channel-update pecl.php.net
sudo printf "\n" | pecl install libsodium
echo "extension=imagick.so" > /etc/php.d/20-imagick.ini
echo 'extension=sodium.so' > /etc/php.d/20-sodium.ini
clear

# Firewall
echo -e "${green}Set Firewall${reset}"
sudo firewall-cmd --permanent --add-service=https --add-service=http
sudo firewall-cmd --reload
clear 

# Make Self-Signed SSL 
echo -e "${green}Make Self-Signed SSL${reset}"
sudo chown nginx:nginx /usr/share/nginx/html -R
sudo mkdir /etc/nginx/ssl
sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/nextcloud.key -out /etc/nginx/ssl/nextcloud.crt -subj /C=$COUNTRY/ST=$STATE/L=$CITY/O=$ORG/OU=$ORG_UNIT/CN=$SERVERNAME
clear

# Edit PHP.ini
echo -e "${green}Editing PHP.ini${reset}"
sudo sed -i 's/upload_max_filesize = 2M/upload_max_filesize = 10240M/g' /etc/php.ini
sudo sed -i 's/memory_limit\ =\ 128M/memory_limit\ =\ 512M/g' /etc/php.ini
sudo sed -i 's/;date.timezone =/date.timezone\ = America\/New_York/g' /etc/php.ini

# Edit 10-opcache.ini
echo -e "${green}Editing Opcache${reset}"
sudo sed -i 's/opcache.max_accelerated_files=4000/opcache.max_accelerated_files=10000/g' /etc/php.d/10-opcache.ini
sudo sed -i 's/;opcache.interned_strings_buffer=8/opcache.interned_strings_buffer=8/g' /etc/php.d/10-opcache.ini
sudo sed -i 's/;opcache.max_accelerated_files=10000/opcache.max_accelerated_files=10000/g' /etc/php.d/10-opcache.ini
sudo sed -i 's/;opcache.memory_consumption=128/opcache.memory_consumption=128/g' /etc/php.d/10-opcache.ini
sudo sed -i 's/;opcache.save_comments=1/opcache.save_comments=1/g' /etc/php.d/10-opcache.ini
sudo sed -i 's/;opcache.revalidate_freq=2/opcache.revalidate_freq=1/g' /etc/php.d/10-opcache.ini

# EDIT php-fpm.d/www.conf
echo -e "${green}Editing php-fpm${reset}"
sudo sed -i 's/user\ =\ apache/user\ =\ nginx/g' /etc/php-fpm.d/www.conf
sudo sed -i 's/group\ =\ apache/group\ =\ nginx/g' /etc/php-fpm.d/www.conf
sudo sed -i 's/;env\[HOSTNAME\]\ =\ \$HOSTNAME/env\[HOSTNAME\]\ =\ \$HOSTNAME/g' /etc/php-fpm.d/www.conf
sudo sed -i 's/;env\[PATH\]\ =\ \/usr\/local\/bin\:\/usr\/bin\:\/bin/env\[PATH\]\ =\ \/usr\/local\/bin\:\/usr\/bin\:\/bin/g' /etc/php-fpm.d/www.conf
sudo sed -i 's/;env\[TMP\]\ =\ \/tmp/env\[TMP\]\ =\ \/tmp/g' /etc/php-fpm.d/www.conf
sudo sed -i 's/;env\[TMPDIR\]\ =\ \/tmp/env\[TMPDIR\]\ =\ \/tmp/g' /etc/php-fpm.d/www.conf
sudo sed -i 's/;env\[TEMP\]\ =\ \/tmp/env\[TEMP\]\ =\ \/tmp/g' /etc/php-fpm.d/www.conf
sudo sed -i 's/;php_value\[opcache.file_cache\]\  =\ \/var\/lib\/php\/opcache/php_value\[opcache.file_cache\]\  =\ \/var\/lib\/php\/opcache/g' /etc/php-fpm.d/www.conf

# Create Dir for opcache 
echo -e "${green}create DIR for Opcache${reset}"
sudo mkdir -p /var/lib/php/{session,opcache}
sudo chown -R nginx:nginx /var/lib/php/{session,opcache}

# Enable and Start Services
echo -e "${green}Services${reset}"
sudo systemctl enable nginx --now
sudo systemctl enable mariadb --now
sudo systemctl enable php-fpm --now

# Setup SQL
cat << EOF >> /tmp/setup.sql
SET PASSWORD FOR 'root'@'localhost' = PASSWORD('$(cat /tmp/.MARIADBPASSWORD)');
DELETE FROM mysql.user WHERE User='';
DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');
DROP DATABASE IF EXISTS test;
DELETE FROM mysql.db WHERE Db='test' OR Db='test\_%';
CREATE DATABASE $DBNAME DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
CREATE USER $USER@localhost IDENTIFIED BY '$(cat /tmp/.APPPASSWORD)';
GRANT ALL PRIVILEGES ON $DBNAME.* TO $USER@localhost;
FLUSH PRIVILEGES;
quit
EOF

mysql -u root < /tmp/setup.sql

# Install NextCloud
cd /tmp
sudo wget https://download.nextcloud.com/server/releases/latest.zip -P /tmp/
sudo unzip /tmp/latest.zip -d /usr/share/nginx/
sudo chown nginx:nginx /usr/share/nginx/nextcloud/ -R

# EDIT Virtual Host
cat << EOF >> /etc/nginx/conf.d/nextcloud.conf
upstream php-handler {
 #server 127.0.0.1:9000;
 server unix:/run/php-fpm/www.sock;
}

server {
 listen 80;
 listen [::]:80;
 server_name $SERVERNAME;
 # enforce https
 return 301 https://\$server_name:443\$request_uri;
}

server {
 listen 443 ssl http2;
 listen [::]:443 ssl http2;
 server_name $SERVERNAME;

 # Use Mozilla's guidelines for SSL/TLS settings
 # https://mozilla.github.io/server-side-tls/ssl-config-generator/
 # NOTE: some settings below might be redundant
 ssl_certificate /etc/nginx/ssl/nextcloud.crt;
 ssl_certificate_key /etc/nginx/ssl/nextcloud.key;
 #ssl_certificate /etc/nginx/ssl/nextcloudkey.pem;
 #ssl_certificate_key /etc/nginx/ssl/nextcloudcrt.pem;

 # Add headers to serve security related headers
 # Before enabling Strict-Transport-Security headers please read into this
 # topic first.
 add_header Strict-Transport-Security "max-age=15768000; includeSubDomains; preload;" always;
 

 # WARNING: Only add the preload option once you read about
 # the consequences in https://hstspreload.org/. This option
 # will add the domain to a hardcoded list that is shipped
 # in all major browsers and getting removed from this list
 # could take several months.
 add_header Referrer-Policy "no-referrer" always;
 add_header X-Content-Type-Options "nosniff" always;
 add_header X-Download-Options "noopen" always;
 add_header X-Frame-Options "SAMEORIGIN" always;
 add_header X-Permitted-Cross-Domain-Policies "none" always;
 add_header X-Robots-Tag "none" always;
 add_header X-XSS-Protection "1; mode=block" always;

 # Remove X-Powered-By, which is an information leak
 fastcgi_hide_header X-Powered-By;

 # Path to the root of your installation
 root /usr/share/nginx/nextcloud;

 location = /robots.txt {
 allow all;
 log_not_found off;
 access_log off;
 }

 # The following 2 rules are only needed for the user_webfinger app.
 # Uncomment it if you're planning to use this app.
 rewrite ^/.well-known/host-meta /public.php?service=host-meta last;
 rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last;

 # The following rule is only needed for the Social app.
 # Uncomment it if you're planning to use this app.
 rewrite ^/.well-known/webfinger /public.php?service=webfinger last;

 location = /.well-known/carddav {
 return 301 \$scheme://\$host:\$server_port/remote.php/dav;
 }
 location = /.well-known/caldav {
 return 301 \$scheme://\$host:\$server_port/remote.php/dav;
 }

 # set max upload size
 client_max_body_size 512M;
 fastcgi_buffers 64 4K;

 # Enable gzip but do not remove ETag headers
 gzip on;
 gzip_vary on;
 gzip_comp_level 4;
 gzip_min_length 256;
 gzip_proxied expired no-cache no-store private no_last_modified no_etag auth;
 gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;

 # Uncomment if your server is built with the ngx_pagespeed module
 # This module is currently not supported.
 #pagespeed off;

 location / {
 rewrite ^ /index.php;
 }

 location ~ ^\/(?:build|tests|config|lib|3rdparty|templates|data)\/ {
 deny all;
 }
 location ~ ^\/(?:\.|autotest|occ|issue|indie|db_|console) {
 deny all;
 }

 location ~ ^\/(?:index|remote|public|cron|core\/ajax\/update|status|ocs\/v[12]|updater\/.+|oc[ms]-provider\/.+)\.php(?:\$|\/) {
 fastcgi_split_path_info ^(.+?\.php)(\/.*|)\$;
 set \$path_info \$fastcgi_path_info;
 try_files \$fastcgi_script_name =404;
 include fastcgi_params;
 fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
 fastcgi_param PATH_INFO \$path_info;
 fastcgi_param HTTPS on;
 # Avoid sending the security headers twice
 fastcgi_param modHeadersAvailable true;
 # Enable pretty urls
 fastcgi_param front_controller_active true;
 fastcgi_pass php-handler;
 fastcgi_intercept_errors on;
 fastcgi_request_buffering off;
 }

 location ~ ^\/(?:updater|oc[ms]-provider)(?:\$|\/) {
 try_files \$uri/ =404;
 index index.php;
 }

 # Adding the cache control header for js, css and map files
 # Make sure it is BELOW the PHP block
 location ~ \.(?:css|js|woff2?|svg|gif|map)\$ {
 try_files \$uri /index.php\$request_uri;
 add_header Cache-Control "public, max-age=15778463";
 # Add headers to serve security related headers (It is intended to
 # have those duplicated to the ones above)
 # Before enabling Strict-Transport-Security headers please read into
 # this topic first.
 #add_header Strict-Transport-Security "max-age=15768000; includeSubDomains; preload;" always;
 #
 # WARNING: Only add the preload option once you read about
 # the consequences in https://hstspreload.org/. This option
 # will add the domain to a hardcoded list that is shipped
 # in all major browsers and getting removed from this list
 # could take several months.
 add_header Referrer-Policy "no-referrer" always;
 add_header X-Content-Type-Options "nosniff" always;
 add_header X-Download-Options "noopen" always;
 add_header X-Frame-Options "SAMEORIGIN" always;
 add_header X-Permitted-Cross-Domain-Policies "none" always;
 add_header X-Robots-Tag "none" always;
 add_header X-XSS-Protection "1; mode=block" always;

 # Optional: Don't log access to assets
 access_log off;
 }

 location ~ \.(?:png|html|ttf|ico|jpg|jpeg|bcmap)\$ {
 try_files \$uri /index.php$request_uri;
 # Optional: Don't log access to other assets
 access_log off;
 }
}
EOF

# Test nginx config
sudo nginx -t

# Setup Data Dir for NextCloud
sudo mkdir /usr/share/nginx/nextcloud-data
sudo chown nginx:nginx /usr/share/nginx/nextcloud-data -R
sudo chcon -t httpd_sys_rw_content_t /usr/share/nginx/nextcloud-data/ -R

# Setup Database to Nexcloud
sudo -u nginx php /usr/share/nginx/nextcloud/occ maintenance:install --database "mysql" --database-name "$DBNAME" --database-user "$USER" --database-pass "$(cat /tmp/.APPPASSWORD)" --admin-user "$ADMIN" --admin-pass "$(cat /tmp/.ADMINPASS)" --data-dir "/usr/share/nginx/nextcloud-data"

echo -e "${green}Adding additional settings to Nextcloud${reset}"
# Trusted Domains
sudo sed -i "s/0 => 'localhost/0 => '*/g" /usr/share/nginx/nextcloud/config/config.php
# Make the Default Language EN
sudo sed -i "/);/i\ \ 'default_language' => 'en'," /usr/share/nginx/nextcloud/config/config.php
# Force the default language to EN
sudo sed -i "/);/i\ \ 'force_language' => 'en'," /usr/share/nginx/nextcloud/config/config.php
# Set default phone region to EN
sudo sed -i "/);/i\ \ 'default_phone_region' => 'US'," /usr/share/nginx/nextcloud/config/config.php
# MemCache Settings
sudo sed -i "/);/i\ \ 'memcache.local' => '\\\\\\\\\\OC\\\\\\\\\\Memcache\\\\\\\\\\APCu'," /usr/share/nginx/nextcloud/config/config.php
sudo sed -i "/);/i\ \ 'memcache.locking' => '\\\\\\\\\\OC\\\\\\\\\\Memcache\\\\\\\\\\Redis'," /usr/share/nginx/nextcloud/config/config.php
sudo sed -i "/);/i\ \ 'redis'\ =>" /usr/share/nginx/nextcloud/config/config.php
sudo sed -i "/);/i\ \ \ \ \ array\ (" /usr/share/nginx/nextcloud/config/config.php
sudo sed -i "/);/i\ \ \ \ \ 'host'\ =>\ 'localhost'," /usr/share/nginx/nextcloud/config/config.php
sudo sed -i "/);/i\ \ \ \ \ 'port'\ =>\ 6379,"  /usr/share/nginx/nextcloud/config/config.php
sudo sed -i "/);/i\ \ )," /usr/share/nginx/nextcloud/config/config.php

# Restart Nginx
sudo systemctl reload nginx

# SELinux
sudo setsebool -P httpd_execmem 1
sudo chcon -t httpd_sys_rw_content_t /usr/share/nginx/nextcloud/ -R
sudo setsebool -P httpd_can_network_connect 1
sudo setfacl -R -m u:nginx:rwx /var/lib/php/opcache/
sudo setfacl -R -m u:nginx:rwx /var/lib/php/session/
sudo setfacl -R -m u:nginx:rwx /var/lib/php/wsdlcache/
sudo setsebool -P httpd_can_network_connect 1
sudo semanage fcontext -a -t httpd_sys_rw_content_t '/usr/share/nginx/nextcloud/data(/.*)?'
sudo semanage fcontext -a -t httpd_sys_rw_content_t '/usr/share/nginx/nextcloud/config(/.*)?'
sudo semanage fcontext -a -t httpd_sys_rw_content_t '/usr/share/nginx/nextcloud/apps(/.*)?'
sudo semanage fcontext -a -t httpd_sys_rw_content_t '/usr/share/nginx/nextcloud/.htaccess'
sudo semanage fcontext -a -t httpd_sys_rw_content_t '/usr/share/nginx/nextcloud/.user.ini'
sudo semanage fcontext -a -t httpd_sys_rw_content_t '/usr/share/nginx/nextcloud/3rdparty/aws/aws-sdk-php/src/data/logs(/.*)?'

sudo restorecon -Rv '/usr/share/nginx/nextcloud/'

# Some CIS Security 
echo -e "${Green}2.3.1 Ensure NGINX directories and files are owned by root${reset}"
sudo chown -R root:root /etc/nginx

echo -e "${Green}2.3.2 Ensure access to NGINX directories and files is restricted${reset}"
sudo find /etc/nginx -type d | xargs chmod 750
sudo find /etc/nginx -type f | xargs chmod 640

echo -e "${Green}2.5.2 Ensure default error and index.html pages do not reference NGINX${reset}"
sudo cp /usr/share/nginx/html/index.html /usr/share/nginx/html/index.original
sudo rm -f /usr/share/nginx/html/index.html
cat << EOF >> /usr/share/nginx/html/index.html
<div id="main">
    	<div class="fof">
        		<h1>Error 404</h1>
    	</div>
</div>
EOF

sudo cp /usr/share/nginx/html/50x.html /usr/share/nginx/html/50x.html.original
sudo rm -f /usr/share/nginx/html/50x.html
cat << EOF >> /usr/share/nginx/html/50x.html
<div id="main">
    	<div class="fof">
        		<h1>Error 50X</h1>
    	</div>
</div>
EOF

# Restart Services
sudo systemctl restart nginx
sudo systemctl restart mariadb
sudo systemctl restart php-fpm


echo -e "${red}To access NextCloud Core${reset}"
echo -e "${red}=====================${reset}"
echo -e "${green}Open an internet browser${reset}"
echo -e "${green}HTTPS://<HOST-IP>${reset}"
echo -e "${green}HTTPS://$SERVERNAME${reset}"
echo ""
echo -e "${green}User: admin${reset}"
echo -e "${green}Password:" $(cat /tmp/.ADMINPASS) "${reset}"
echo ""
echo ""
echo -e "${red}Don't Forget to Clean the TMP${reset}"
echo -e "${red}.APPPASSWORD${reset}"
echo -e "${red}.MARIADBPASSWORD${reset}"
echo -e "${red}.ADMINPASS${reset}"
echo -e "${red}setup.sql${reset}"





#certbot --nginx --non-interactive --agree-tos -m $CERTMAIL -d $SERVERNAME
